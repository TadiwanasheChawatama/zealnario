# from django.db import models
# from django.core.exceptions import ValidationError
# from core.models import TimeStampedModel


# class Category(models.Model):
#     name = models.CharField(max_length=100)
#     description = models.TextField(blank=True)
#     parent = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True, related_name='subcategories')
    
#     class Meta:
#         verbose_name_plural = 'Categories'
    
#     def __str__(self):
#         return self.name


# class Collection(models.Model):
#     name = models.CharField(max_length=100, unique=True)
#     description = models.TextField(blank=True)
#     image = models.ImageField(upload_to='collections/', blank=True)
#     active = models.BooleanField(default=True)
    
#     def __str__(self):
#         return self.name


# class ProductSize(models.Model):
#     size_code = models.CharField(max_length=10, unique=True)  # SM, MD, LG, XL
#     size_name = models.CharField(max_length=50)  # Small, Medium, etc.
#     sort_order = models.PositiveIntegerField(default=0)  # For proper size ordering
    
#     class Meta:
#         ordering = ['sort_order']
    
#     def __str__(self):
#         return f"{self.size_name} ({self.size_code})"


# class ProductColor(models.Model):
#     name = models.CharField(max_length=50, unique=True)
#     color_code = models.CharField(max_length=20, blank=True)  # Hex codes
    
#     def __str__(self):
#         return self.name


# class Product(TimeStampedModel):
#     name = models.CharField(max_length=100)
#     base_price = models.DecimalField(max_digits=10, decimal_places=2)
#     material = models.CharField(max_length=50, blank=True)
#     style = models.CharField(max_length=50, blank=True)
#     season = models.CharField(max_length=50, blank=True)
#     weight = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
#     vat_rate = models.DecimalField(max_digits=4, decimal_places=2)
#     base_shipping_cost = models.DecimalField(max_digits=6, decimal_places=2)
#     tax_rate = models.DecimalField(max_digits=4, decimal_places=2)
    
#     # Many-to-many relationships (these are correct)
#     sizes = models.ManyToManyField(ProductSize, related_name='products')
#     colors = models.ManyToManyField(ProductColor, related_name='products')
#     categories = models.ManyToManyField(Category, related_name='products')
#     collections = models.ManyToManyField(Collection, related_name='products')
    
#     # Status fields
#     is_active = models.BooleanField(default=True)
    
#     def __str__(self):
#         return self.name
    
#     def get_primary_image(self):
#         """Get the primary product image"""
#         return self.images.filter(is_primary=True).first()
    
#     def get_available_variants(self):
#         """Get all available variants for this product"""
#         return self.variants.filter(is_available=True, stock_quantity__gt=0)
    
#     def get_price_range(self):
#         """Get min and max price including variants"""
#         variants = self.variants.all()
#         if not variants.exists():
#             return self.base_price, self.base_price
        
#         prices = [self.base_price + variant.price_adjustment for variant in variants]
#         return min(prices), max(prices)


# class ProductDescription(models.Model):
#     product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='descriptions')
#     description_text = models.TextField()
#     order = models.PositiveSmallIntegerField(default=0)
    
#     class Meta:
#         ordering = ['order']
#         unique_together = ['product', 'order']
    
#     def __str__(self):
#         return f"{self.product.name} - Description {self.order}"


# class ProductInstruction(models.Model):
#     product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='instructions')
#     instruction_text = models.TextField()
#     order = models.PositiveSmallIntegerField(default=0)
    
#     class Meta:
#         ordering = ['order']
#         unique_together = ['product', 'order']
    
#     def __str__(self):
#         return f"{self.product.name} - Instruction {self.order}"


# class ProductImage(models.Model):
#     product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='images')
#     image = models.ImageField(upload_to='products/')
#     alt_text = models.CharField(max_length=200, blank=True)  # For accessibility
#     is_primary = models.BooleanField(default=False)
#     display_order = models.PositiveSmallIntegerField(default=0)
    
#     class Meta:
#         ordering = ['display_order']
#         unique_together = ['product', 'display_order']
    
#     def __str__(self):
#         return f"{self.product.name} - Image {self.display_order}"
    
#     def save(self, *args, **kwargs):
#         # Ensure only one primary image per product
#         if self.is_primary:
#             ProductImage.objects.filter(product=self.product, is_primary=True).update(is_primary=False)
#         super().save(*args, **kwargs)


# class ProductGallery(models.Model):
#     product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='gallery')
#     image = models.ImageField(upload_to='gallery/')
#     comment = models.TextField(blank=True)
#     likes = models.PositiveIntegerField(default=0)
    
#     class Meta:
#         verbose_name_plural = 'Product Galleries'
    
#     def __str__(self):
#         return f"{self.product.name} - Gallery Item {self.id}"


# class ProductVariant(models.Model):
#     product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='variants')
#     size = models.ForeignKey(ProductSize, on_delete=models.CASCADE)
#     color = models.ForeignKey(ProductColor, on_delete=models.CASCADE)
#     sku = models.CharField(max_length=50, unique=True)
#     price_adjustment = models.DecimalField(max_digits=6, decimal_places=2, default=0)
#     stock_quantity = models.PositiveIntegerField(default=0)
#     is_available = models.BooleanField(default=True)
    
#     # Additional variant-specific fields
#     weight_adjustment = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    
#     class Meta:
#         unique_together = ['product', 'size', 'color']
#         indexes = [
#             models.Index(fields=['product', 'is_available']),
#             models.Index(fields=['sku']),
#         ]
    
#     def __str__(self):
#         return f"{self.product.name} - {self.size.size_code} - {self.color.name}"
    
#     @property
#     def final_price(self):
#         """Calculate the final price including adjustments"""
#         return self.product.base_price + self.price_adjustment
    
#     @property
#     def is_in_stock(self):
#         """Check if variant is in stock"""
#         return self.is_available and self.stock_quantity > 0
    
#     def clean(self):
#         """Validate that size and color are associated with the product"""
#         if self.size not in self.product.sizes.all():
#             raise ValidationError(f"Size {self.size} is not available for product {self.product}")
#         if self.color not in self.product.colors.all():
#             raise ValidationError(f"Color {self.color} is not available for product {self.product}")


# class Promotion(TimeStampedModel):
#     name = models.CharField(max_length=100)
#     description = models.TextField(blank=True)
#     discount_percentage = models.PositiveIntegerField()
#     start_date = models.DateField()
#     end_date = models.DateField()
#     products = models.ManyToManyField(Product, related_name='promotions')
#     active = models.BooleanField(default=True)
    
#     def __str__(self):
#         return self.name
    
#     def clean(self):
#         if self.start_date >= self.end_date:
#             raise ValidationError("End date must be after start date")


# class NewArrival(models.Model):
#     product = models.ForeignKey(Product, on_delete=models.CASCADE)
#     arrival_date = models.DateField()
#     active = models.BooleanField(default=True)
    
#     class Meta:
#         unique_together = ['product', 'arrival_date']
    
#     def __str__(self):
#         return f"{self.product.name} - New Arrival {self.arrival_date}"




















# these are my django models for my products but how can i use the productvariants effeciently and why is it important
# and is the way that i structured my models correct

# from django.db import models
# from core.models import TimeStampedModel


# class Category(models.Model):
#     name = models.CharField(max_length=100)
#     description = models.TextField(blank=True)
#     parent = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True, related_name='subcategories')
    
#     class Meta:
#         verbose_name_plural = 'Categories'
    
#     def _str_(self):
#         return self.name

# class Collection(models.Model):
#     name = models.CharField(max_length=100, unique=True)
#     description = models.TextField(blank=True)
#     image = models.ImageField(upload_to='collections/', blank=True)
#     active = models.BooleanField(default=True)
    
#     def _str_(self):
#         return self.name

# class ProductDescription(models.Model):
#     # product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='descriptions')
#     description_text = models.TextField()
#     order = models.PositiveSmallIntegerField(default=0)
    
#     class Meta:
#         ordering = ['order']
    
#     def _str_(self):
#         return f"{self.product.name} - Description {self.order}"

# class ProductInstruction(models.Model):
#     # product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='instructions')
#     instruction_text = models.TextField()
#     order = models.PositiveSmallIntegerField(default=0)
    
#     class Meta:
#         ordering = ['order']
    
#     def _str_(self):
#         return f"{self.product.name} - Instruction {self.order}"

# class ProductSize(models.Model):
#     size_code = models.CharField(max_length=10)  # SM, MD, LG, XL
#     size_name = models.CharField(max_length=50)  # Small, Medium, etc.
    
#     def _str_(self):
#         return self.size_code

# class ProductColor(models.Model):
#     name = models.CharField(max_length=50)
#     color_code = models.CharField(max_length=20, blank=True)  # For hex codes or color system references
    
#     def _str_(self):
#         return self.name

# class ProductImage(models.Model):
#     # product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='images')
#     image = models.ImageField(upload_to='products/')
#     is_primary = models.BooleanField(default=False)
#     display_order = models.PositiveSmallIntegerField(default=0)
    
#     class Meta:
#         ordering = ['display_order']
    
#     def _str_(self):
#         return f"{self.product.name} - Image {self.display_order}"

# class ProductGallery(models.Model):
#     # product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='gallery')
#     image = models.ImageField(upload_to='gallery/')
#     comment = models.TextField(blank=True)
#     likes = models.PositiveIntegerField(default=0)
    
#     class Meta:
#         verbose_name_plural = 'Product Galleries'
    
#     def _str_(self):
#         return f"{self.product.name} - Gallery Item {self.id}"


# class Product(TimeStampedModel):
#     name = models.CharField(max_length=100)
#     base_price = models.DecimalField(max_digits=10, decimal_places=2)
#     material = models.CharField(max_length=50, blank=True)
#     style = models.CharField(max_length=50, blank=True)
#     season = models.CharField(max_length=50, blank=True)
#     weight = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
#     vat_rate = models.DecimalField(max_digits=4, decimal_places=2)
#     base_shipping_cost = models.DecimalField(max_digits=6, decimal_places=2)
#     tax_rate = models.DecimalField(max_digits=4, decimal_places=2)
#     sizes = models.ManyToManyField(ProductSize, related_name='productSizes')
#     description = models.ManyToManyField(ProductDescription, related_name='productDescriptions')
#     images = models.ManyToManyField(ProductImage, related_name='productImages')
#     gallery = models.ManyToManyField(ProductGallery, related_name='productGallery')
#     instructions = models.ManyToManyField(ProductInstruction, related_name='productInstructions')
#     colors = models.ManyToManyField(ProductColor, related_name='productColors')
#     categories = models.ManyToManyField(Category, related_name='products')
#     collections = models.ManyToManyField(Collection, related_name='products')
    
#     def _str_(self):
#         return self.name


# class ProductVariant(models.Model):
#     product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='variants')
#     size = models.ForeignKey(ProductSize, on_delete=models.CASCADE)
#     color = models.ForeignKey(ProductColor, on_delete=models.CASCADE)
#     sku = models.CharField(max_length=50, unique=True)
#     price_adjustment = models.DecimalField(max_digits=6, decimal_places=2, default=0)
#     stock_quantity = models.PositiveIntegerField(default=0)
#     is_available = models.BooleanField(default=True)
    
#     class Meta:
#         unique_together = ['product', 'size', 'color']
    
#     def _str_(self):
#         return f"{self.product.name} - {self.size} - {self.color}"

# class Promotion(TimeStampedModel):
#     name = models.CharField(max_length=100)
#     description = models.TextField(blank=True)
#     discount_percentage = models.PositiveIntegerField()
#     start_date = models.DateField()
#     end_date = models.DateField()
#     products = models.ManyToManyField(Product, related_name='promotions')
#     active = models.BooleanField(default=True)
    
#     def _str_(self):
#         return self.name

# class NewArrival(models.Model):
#     product = models.ForeignKey(Product, on_delete=models.CASCADE)
#     arrival_date = models.DateField()
#     active = models.BooleanField(default=True)
    
#     def _str_(self):
#         return f"{self.product.name} - New Arrival {self.arrival_date}"



